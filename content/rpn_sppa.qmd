---
title: "SPPA"
author: "jjh"
date: "Last compiled on `r format(Sys.time(), '%d %B, %Y %H:%M')`"
editor: visual
---

```{r, include = FALSE}
require(tidyverse)
require(spatstat)
require(rgdal)
require(sf)
require(stars)
require(terra)
require(unmarked)
require(AHMbook)
require(png) #bring png images into R platform
require(raster)
require(landscapemetrics)
require(gapminder)
require(wesanderson)
require(ggridges)
require(psych)
require(DHARMa)
```

## Quadrat Count

### Vaihu

```{r}
vhu_csv <- read.csv("vhu_centroids.csv")
```

```{r}
vhu_csv2 <- as_tibble(vhu_csv)
```

```{r, include = TRUE}
vhu_csv2 
```

**Define window for spatial pattern analyses based on the extent defined above**

```{r}
vhu_window <- owin(c(0, 10), c(0, 25))
```

```{r}
attach(vhu_window)
```

```{r}
vhu_corals <- ppp(vhu_csv2$x, vhu_csv2$y, window = vhu_window)
```

**Summary information**

```{r}
summary(vhu_corals)
```

This summary shows there are 3131 points (pocilloporid coral colony) and provides the observed, lambda. The density plot can be a helpful visualization of intensity of points across the plot. By plotting the spatial intensity this way, spatial trends in the point occurrences that may violate the assumption of homogeneous point process.

**Density plots**

```{r}
plot(
  density(vhu_corals)
)
```

**Alter smoothing parameter**

```{r}
plot(
  density(vhu_corals, 1)
)  
```

**Contour plot**

```{r}
contour(
  density(vhu_corals, 1)
)
```

We can also make tallies of counts of point locations based on quadrats overlaid on the plot. To determine whether these quadrat counts conform to CSR (i.e., a homogeneous Poisson process), use a simple Chi-Square test statistic.

**Quadrat counts**

Counts in 10 x 25 m quadrats

```{r}
vhu_Q <- quadratcount(vhu_corals, nx = 10, ny = 25)
```

**Plot**

```{r}
plot(vhu_corals, cex = 1)
plot(vhu_Q, add = TRUE, cex = 1)
```

**Chi-sq test for complete spatial randomness, CSR**

```{r}
quadrat.test(vhu_corals, nx = 10, ny = 25, method = "Chisq")
```

The test statistic suggests highly a non-random point pattern at the scale of the quadrat defined. Note that this test is more akin to a first-order point pattern analysis because it is based on the dispersion of points among sampling quadrats.

### West - Manavai

```{r}
man_csv <- read.csv("man_centroids.csv")
```

```{r}
man_csv2 <- as_tibble(man_csv)
```

```{r, include = TRUE}
man_csv2 
```

**Define window for spatial pattern analyses based on the extent defined above**

```{r}
man_window <- owin(c(0, 10), c(0, 25))
```

```{r}
attach(man_window)
```

```{r}
man_corals <- ppp(man_csv2$x, man_csv2$y, window = man_window)
```

**Summary information**

```{r}
summary(man_corals)
```

This summary shows there are 3131 points (pocilloporid coral colony) and provides the observed, lambda. The density plot can be a helpful visualization of intensity of points across the plot. By plotting the spatial intensity this way, spatial trends in the point occurrences that may violate the assumption of homogeneous point process.

**Density plots**

```{r}
plot(
  density(man_corals)
)
```

**Alter smoothing parameter**

```{r}
plot(
  density(man_corals, 1)
)  
```

**Contour plot**

```{r}
contour(
  density(man_corals, 1)
)
```

We can also make tallies of counts of point locations based on quadrats overlaid on the plot. To determine whether these quadrat counts conform to CSR (i.e., a homogeneous Poisson process), use a simple Chi-Square test statistic.

**Quadrat counts**

Counts in 10 x 25 m quadrats

```{r}
man_Q <- quadratcount(man_corals, nx = 10, ny = 25)
```

**Plot**

```{r}
plot(man_corals, cex = 1)
plot(man_Q, add = TRUE, cex = 1)
```

**Chi-sq test for complete spatial randomness, CSR**

```{r}
quadrat.test(man_corals, nx = 10, ny = 25, method = "Chisq")
```

### North - Anakena

```{r}
ana_csv <- read.csv("ana_centroids.csv")
```

```{r}
ana_csv2 <- as_tibble(ana_csv)
```

```{r, include = TRUE}
ana_csv2 
```

**Define window for spatial pattern analyses based on the extent defined above**

```{r}
ana_window <- owin(c(0, 10), c(0, 25))
```

```{r}
attach(ana_window)
```

```{r}
ana_corals <- ppp(ana_csv2$x, ana_csv2$y, window = ana_window)
```

**Summary information**

```{r}
summary(ana_corals)
```

This summary shows there are 3131 points (pocilloporid coral colony) and provides the observed, lambda. The density plot can be a helpful visualization of intensity of points across the plot. By plotting the spatial intensity this way, spatial trends in the point occurrences that may violate the assumption of homogeneous point process.

**Density plots**

```{r}
plot(
  density(ana_corals)
)
```

**Alter smoothing parameter**

```{r}
plot(
  density(ana_corals, 1)
)  
```

**Contour plot**

```{r}
contour(
  density(ana_corals, 1)
)
```

We can also make tallies of counts of point locations based on quadrats overlaid on the plot. To determine whether these quadrat counts conform to CSR (i.e., a homogeneous Poisson process), use a simple Chi-Square test statistic.

**Quadrat counts**

Counts in 10 x 25 m quadrats

```{r}
ana_Q <- quadratcount(ana_corals, nx = 10, ny = 25)
```

**Plot**

```{r}
plot(ana_corals, cex = 1)
plot(ana_Q, add = TRUE, cex = 1)
```

**Chi-sq test for complete spatial randomness, CSR**

```{r}
quadrat.test(ana_corals, nx = 10, ny = 25, method = "Chisq")
```

The test statistic suggests highly a non-random point pattern at the scale of the quadrat defined. Note that this test is more akin to a first-order point pattern analysis because it is based on the dispersion of points among sampling quadrats.

## Ripley's K function:

 - Second-order point pattern analyses can readily be implemented in 'spatstat'.
 - Ripley's K and the standard L functions
 - Ignore edge effects with '(correction = "none")'

### Southeast - Vaihu

```{r}
K_none_vhu <- Kest(vhu_corals, rmax = 5.0, correction = "none")
```

 - Plot K

```{r}
plot(K_none_vhu, legend = F, main = "Southeast: Ripley's K")
```

 - Plot L with 1:1 expectation

```{r}
L_none_vhu <- Lest(vhu_corals, rmax = 5.0, correction = "none")
```

```{r}
plot(L_none_vhu, legend = F, main = "Southeast: standardized L function (standardized 1:1)")
```

 - Plot L with 0 expectation
 
```{r}
plot(L_none_vhu, . - r ~ r, legend = F, main = "Southeast: standardized L function (standardized 0)")
```

The above analysis ignores the problem of edge effects. `spatstat` provides a variety of
edge corrections. Contrast an (1) isotropic and (2) translate correction for 
adjusting for boundary effects. The isotropic correction uses a simple weighting for 
the area sampled near the plot boundary (Ripley 1988), the translate correction uses 
a toroidal shift. We adjust for potential boundary effects
by typing:

 - Isotropic edge correction

```{r}
L_iso_vhu <- Lest(vhu_corals, rmax = 5.0, correction = "isotropic")
```

```{r}
plot(L_iso_vhu, . - r ~ r, legend = F, main = "Southeast: standardzied L (isotropic correction)")
```

 - Translate (toroidal) edge correction

```{r}
L_trans_vhu <- Lest(vhu_corals, rmax = 5.0, correction = "trans")
```


```{r}
plot(L_trans_vhu, . - r ~ r, legend = F, main = "Southeast: standardzied L (translate correction)")
```

### West - Manavai

```{r}
K_none_man <- Kest(man_corals, rmax = 5.0, correction = "none")
```

 - Plot K

```{r}
plot(K_none_man, legend = F, main = "West: Ripley's K")
```

 - Plot L with 1:1 expectation

```{r}
L_none_man <- Lest(man_corals, rmax = 5.0, correction = "none")
```

```{r}
plot(L_none_man, legend = F, main = "West: standardized L function (standardized 1:1)")
```

 - Plot L with 0 expectation
 
```{r}
plot(L_none_man, . - r ~ r, legend = F, main = "West: standardized L function (standardized 0)")
```

The above analysis ignores the problem of edge effects. `spatstat` provides a variety of
edge corrections. Contrast an (1) isotropic and (2) translate correction for 
adjusting for boundary effects. The isotropic correction uses a simple weighting for 
the area sampled near the plot boundary (Ripley 1988), the translate correction uses 
a toroidal shift. We adjust for potential boundary effects
by typing:

 - Isotropic edge correction

```{r}
L_iso_man <- Lest(man_corals, rmax = 5.0, correction = "isotropic")
```

```{r}
plot(L_iso_man, . - r ~ r, legend = F, main = "West: standardzied L (isotropic correction)")
```

 - Translate (toroidal) edge correction

```{r}
L_trans_man <- Lest(man_corals, rmax = 5.0, correction = "trans")
```


```{r}
plot(L_trans_man, . - r ~ r, legend = F, main = "West: standardzied L (translate correction)")
```

### North - Anakena

```{r}
K_none_ana <- Kest(ana_corals, rmax = 5.0, correction = "none")
```

 - Plot K

```{r}
plot(K_none_ana, legend = F, main = "North: Ripley's K")
```

 - Plot L with 1:1 expectation

```{r}
L_none_ana <- Lest(ana_corals, rmax = 5.0, correction = "none")
```

```{r}
plot(L_none_ana, legend = F, main = "North: standardized L function (standardized 1:1)")
```

 - Plot L with 0 expectation
 
```{r}
plot(L_none_ana, . - r ~ r, legend = F, main = "North: standardized L function (standardized 0)")
```

The above analysis ignores the problem of edge effects. `spatstat` provides a variety of
edge corrections. Contrast an (1) isotropic and (2) translate correction for 
adjusting for boundary effects. The isotropic correction uses a simple weighting for 
the area sampled near the plot boundary (Ripley 1988), the translate correction uses 
a toroidal shift. We adjust for potential boundary effects
by typing:

 - Isotropic edge correction

```{r}
L_iso_ana <- Lest(ana_corals, rmax = 5.0, correction = "isotropic")
```

```{r}
plot(L_iso_ana, . - r ~ r, legend = F, main = "North: standardzied L (isotropic correction)")
```

 - Translate (toroidal) edge correction

```{r}
L_trans_ana <- Lest(ana_corals, rmax = 5.0, correction = "trans")
```

```{r}
plot(L_trans_ana, . - r ~ r, legend = F, main = "North: standardzied L (translate correction)")
```

For the functions above, two lines are drawn. The $L_{pois}$ line
is a dashed line that represents the expected (theoretical) 
value based on a Poisson process (CSR). The way that `spatstat` calculates $L$ is to 
linearize $K$ such that the expected value is $r$ (or the radius). The other solid line
represents the estimated $L$ (linearized $K$), when the edges are ignored.

When comparing the $L$ function that ignores boundaries to those above that account
for boundaries, notice that patterns change at larger distances - we expect that the $L$ 
function at larger distances should potentially be more biased than at smaller distances 
because larger radii will naturally overlap more with the boundary of the study area. 

When edge effects are ignored, the effect in the of counting fewer points within the 
radius $r$ near the boundary, so the observed value for $L$ or $K$ should have an artifact of 
decreasing as $r$ increases.

The analyses so far are exploratory. While the observed statistics ($K$, $L$) appear different 
than the expectation, it is unclear if these are substantially (or significantly) different.

To conduct formal inference regarding if the point pattern follows CSR, we can use Monte Carlo
simulations ro calculate a confidence envelope under CSR with the `envelope` function.














