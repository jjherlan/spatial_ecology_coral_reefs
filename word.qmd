---
title: "Word"
author: "jjh"
format: docx
editor: visual
---

```{r}
require(flextable)
require(tidyverse)
require(car)
require(betareg)
require(emmeans)
```

```{r}
poci_size <- read.csv('coral_size.csv')
```

```{r}
poci_size.gg <- read_csv("poci_size_main.csv")
```

```{r}
ggplot(poci_size.gg, aes(x = size_cm)) +
  geom_histogram(fill = "#333399") + 
  #below here is ylabel, xlabel, and main title
  ylab("Frequency") +
  xlab(NULL) +
  ggtitle(expression("Coral size " (cm**2))) +
  theme_bw() +
  facet_wrap(~ Site, ncol = 1) +
  #theme sets sizes, text, etc
  theme(axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14), 
        axis.text.y  = element_text(size= 10),
        axis.text.x  = element_text(size = 12), 
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 12),
        plot.title = element_text(hjust = 0.5, size = 14),
        # change plot background, grid lines, etc (just examples so you can see)
        panel.background = element_rect(fill = "white"),
        panel.grid.minor.y = element_blank(),
        panel.grid.major = element_blank(),
        plot.background = element_rect(fill = "white"),
        legend.background = element_rect(fill = "white"),
        strip.text.x = element_text(size = 12, colour = "#FFFFFF"),
        strip.background = element_rect(fill = '#000066')
  )
```

```{r}
poci_size2 <-
poci_size %>%
  as_tibble() %>%
  mutate(size_cm = area*10000) %>%
  group_by(Site) %>%
  dplyr::summarize(mean = mean(size_cm), 
                   sd = sd(size_cm), 
                   n = n(),
                   se = sd/sqrt(n)
  ) %>%
  mutate(se = sd / sqrt(n),
         lower.ci = mean - qt(1 - (0.05 / 2), n - 1) * se,
         upper.ci = mean + qt(1 - (0.05 / 2), n - 1) * se) %>%
  mutate_at(vars(Site), factor) %>%
  add_column(
          location = c('Anakena', 'Manavai', 'Southeast')
          ) %>%
  mutate_at(vars(location), factor)
```

```{r}
poci_size.gg <-
  poci_size %>%
  mutate(size_cm = area*10000) %>%
  as_tibble() %>%
  mutate_at(vars(Site), factor)
```

```{r}
model_1.lm <- lm(size_cm ~ Site, data = poci_size.gg)
```

```{r}
model_1.lm
```

```{r}
summary(model_1.lm)
```

```{r}
par(mfrow = c(2, 2))
plot(model_1.lm)
```

```{r}
Anova(model_1.lm, type = "III")
```

```{r}
model_1.aov <- Anova(model_1.lm, type = "III")
```

```{r}
as.data.frame(model_1.aov)
```

```{r}
flextable(model_1.aov)
```

**Beta Regression II:** $\phi$ does vary (by **Site**)

```{r, include = TRUE}
p_cover = read_csv('rpn_percent_cover.csv') %>% 
  group_by(Site) %>%
  mutate(
    pland_decimal = pland*0.01
  ) %>%
  mutate_at(vars(Site, cover, plot_id), factor)
```

```{r}
p_cover
```

```{r}
head(p_cover)
```

```{r}
ggplot(p_cover, aes(x = pland_decimal)) +
  geom_histogram(fill = "#333399") + 
  #below here is ylabel, xlabel, and main title
  ylab("Frequency") +
  xlab(NULL) +
  ggtitle(expression("Coral Cover (%)")) +
  theme_bw() +
  facet_wrap(~ Site, ncol = 1) +
  #theme sets sizes, text, etc
  theme(axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14), 
        axis.text.y  = element_text(size= 10),
        axis.text.x  = element_text(size = 12), 
        legend.text = element_text(size = 12),
        legend.title = element_text(size = 12),
        plot.title = element_text(hjust = 0.5, size = 14),
        # change plot background, grid lines, etc (just examples so you can see)
        panel.background = element_rect(fill = "white"),
        panel.grid.minor.y = element_blank(),
        panel.grid.major = element_blank(),
        plot.background = element_rect(fill = "white"),
        legend.background = element_rect(fill = "white"),
        strip.text.x = element_text(size = 12, colour = "#FFFFFF"),
        strip.background = element_rect(fill = '#000066')
  )
```

::: {.fold .s}
```{r}
plot(pland_decimal ~ Site, data = p_cover)
```
:::

```{r}
p_cover.mean <-
  p_cover %>%
  group_by(Site) %>%
  dplyr::summarise(mean = mean(pland_decimal))
```

```{r}
p_cover.mean
```

One option to deal with 0 and 100 percent cover is to add and subtract a small amount to those values

```{r}
transform01 <- function(x) {
  (x * (length(x) - 1) + 0.5) / (length(x))
}
```

```{r}
p_cover$pland_decimal_scaled <- transform01(p_cover$pland_decimal)
```

## Methods for analyzing percent cover of pocilloporid coral

One option for dealing with the 0 and 1 values is to transform them to be slightly less than one or more than zero. This approach assumes that the data are consistent with a common beta distribution. We fit five models to the data: three variations on the beta model and two linear model approaches.

A beta regression assuming a common spatial aggregation $\delta$ or precision parameter ($\phi$) (object named: mod.beta1). Notice that $\delta= \frac{1}{1+\phi}$ and $\phi=\frac{(1-\delta)}{\delta}$. A beta regression assuming each year had a different $\phi$ parameter (object named: mod.beta2).

Another option for modeling the data is to use a zero-one augmented beta model. Currently, the betareg package does not implement this model directly. Therefore, we follow the theoretical results shown in Ospina and Ferrari (2010) that suggest a three-part model can be fit to the data. Basically, we use logistic regression with response an indicator variable for whether or not the plot had zero recorded cover, another logistic regression with response an indicator for whether or not the plot had 100$\%$ recorded percent cover, and then the beta regression is used to model the continuous percent cover observations ranging from greater than 0 and less than 1.

Other options based on assuming that the residuals are normally distributed is to use a linear model with a logit-transformed response (object named: mod.lmlogit) or a linear model with response untransformed proportions (object named: mod.lmraw).

For comparison this applies a logit-transformation to the empirical proportions and then uses a standard linear regression model.

```{r}
p_cover_mod.beta2 <- betareg(pland_decimal_scaled ~ Site | Site, data = p_cover, link = c("logit"), link.phi = NULL, type = c("ML"))
```

```{r}
test(pairs(emmeans(p_cover_mod.beta2, ~ Site, mode = "link")))
```
